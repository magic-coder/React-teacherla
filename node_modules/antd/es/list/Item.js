import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import _extends from 'babel-runtime/helpers/extends';
var __rest = this && this.__rest || function (s, e) {
    var t = {};
    for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];
    }return t;
};
import React from 'react';
import classNames from 'classnames';
import Icon from '../icon';
export var Meta = function Meta(props) {
    var _props$prefixCls = props.prefixCls,
        prefixCls = _props$prefixCls === undefined ? 'ant-list' : _props$prefixCls,
        className = props.className,
        avatar = props.avatar,
        title = props.title,
        description = props.description,
        others = __rest(props, ["prefixCls", "className", "avatar", "title", "description"]);

    var classString = classNames(prefixCls + '-item-meta', className);
    var content = React.createElement(
        'div',
        { className: prefixCls + '-item-meta-content' },
        title && React.createElement(
            'h4',
            { className: prefixCls + '-item-meta-title' },
            title
        ),
        description && React.createElement(
            'p',
            { className: prefixCls + '-item-meta-description' },
            description
        )
    );
    return React.createElement(
        'div',
        _extends({}, others, { className: classString }),
        avatar && React.createElement(
            'div',
            { className: prefixCls + '-item-meta-avatar' },
            avatar
        ),
        (title || description) && content
    );
};
export var Content = function Content(props) {
    var _props$prefixCls2 = props.prefixCls,
        prefixCls = _props$prefixCls2 === undefined ? 'ant-list' : _props$prefixCls2,
        children = props.children,
        className = props.className,
        others = __rest(props, ["prefixCls", "children", "className"]);

    var classString = classNames(prefixCls + '-item-content', className);
    return React.createElement(
        'div',
        _extends({}, others, { className: classString }),
        children
    );
};
export var Action = function Action(props) {
    var _props$prefixCls3 = props.prefixCls,
        prefixCls = _props$prefixCls3 === undefined ? 'ant-list' : _props$prefixCls3,
        children = props.children,
        actions = props.actions,
        className = props.className,
        others = __rest(props, ["prefixCls", "children", "actions", "className"]);

    var classString = classNames(prefixCls + '-item-action', className);
    var actionsContent = actions && actions.map(function (action, i) {
        return React.createElement(
            'span',
            { key: 'antd-list-item-action-' + action.text + '-' + i, className: prefixCls + '-item-action-item', onClick: action.onClick || function () {} },
            action.icon && React.createElement(Icon, { type: action.icon }),
            action.text,
            i !== actions.length - 1 && React.createElement('em', { className: prefixCls + '-item-action-item-split' })
        );
    });
    return React.createElement(
        'div',
        _extends({}, others, { className: classString }),
        actions ? actionsContent : children
    );
};

var Item = function (_React$Component) {
    _inherits(Item, _React$Component);

    function Item() {
        _classCallCheck(this, Item);

        return _possibleConstructorReturn(this, (Item.__proto__ || Object.getPrototypeOf(Item)).apply(this, arguments));
    }

    _createClass(Item, [{
        key: 'render',
        value: function render() {
            var _a = this.props,
                _a$prefixCls = _a.prefixCls,
                prefixCls = _a$prefixCls === undefined ? 'ant-list' : _a$prefixCls,
                children = _a.children,
                extra = _a.extra,
                className = _a.className,
                others = __rest(_a, ["prefixCls", "children", "extra", "className"]);
            var classString = classNames(prefixCls + '-item', className);
            var extraContent = React.createElement(
                'div',
                { className: prefixCls + '-item-extra-wrap' },
                React.createElement(
                    'div',
                    { className: prefixCls + '-item-main' },
                    children
                ),
                React.createElement(
                    'div',
                    { className: prefixCls + '-item-extra' },
                    extra
                )
            );
            return React.createElement(
                'div',
                _extends({}, others, { className: classString }),
                extra ? extraContent : children
            );
        }
    }]);

    return Item;
}(React.Component);

export default Item;

Item.Meta = Meta;
Item.Content = Content;
Item.Action = Action;